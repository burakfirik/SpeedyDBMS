package simpledb;
import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class NestedLoopJoin extends Join {
	private JoinPredicate predicate;
	private DbIterator leftChild;
	private DbIterator rightChild;

	private Tuple leftRecent;
	private Tuple rightRecent;
	private HashEquiJoin equiJoin;

    /**
     * Constructor.  Accepts to children to join and the predicate
     * to join them on
     *
     * @param p The predicate to use to join the children
     * @param child1 Iterator for the left(outer) relation to join
     * @param child2 Iterator for the right(inner) relation to join
     */
    public NestedLoopJoin(JoinPredicate p, DbIterator child1, DbIterator child2) {
        predicate = p;
        leftChild = child1;
        rightChild = child2;
    }
    
    public void open()
        throws DbException, NoSuchElementException, TransactionAbortedException {
        leftChild.open();
        rightChild.open();
        leftRecent = null;
    }

    public void close() {
        leftChild.close();
        rightChild.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        leftChild.rewind();
        rightChild.rewind();
        leftRecent = null;
    }
    
    public TupleDesc getTupleDesc() {
    	return TupleDesc.merge(leftChild.getTupleDesc(),
    			rightChild.getTupleDesc());
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no more tuples.
     * Logically, this is the next tuple in r1 cross r2 that satisfies the join
     * predicate.  There are many possible implementations; the simplest is a
     * nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of
     * Join are simply the concatenation of joining tuples from the left and
     * right relation. Therefore, if an equality predicate is used 
     * there will be two copies of the join attribute
     * in the results.  (Removing such duplicate columns can be done with an
     * additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     *
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
    	Tuple left = leftRecent;
    	assert (leftChild != null);
    	assert (rightChild != null);
    	    	
    	if (left == null && leftChild.hasNext()) {
    		left = leftChild.next();
    		rightChild.rewind();
    	}
    	
    	while (leftChild.hasNext() || rightChild.hasNext()) {
    		//System.out.println("Left is: " + left);
    		while (rightChild.hasNext()) {
    			Tuple right = rightChild.next();
    			if (predicate.filter(left, right)) {
    				leftRecent = left;
    				return joinTuple(left, right, this.getTupleDesc());
    			}
    		}
    		
    		if (leftChild.hasNext()) {
    			rightChild.rewind();
    			left = leftChild.next();
    		}
    		
    		leftRecent = left;
    	}
    	
    	leftRecent = null;
        return null;
    }
    
    private Tuple joinTuple(Tuple left, Tuple right, TupleDesc tupleDesc) {
    	int numFields = tupleDesc.numFields();
    	int leftFields = left.getTupleDesc().numFields();
    	Tuple result = new Tuple(tupleDesc);
    	    	
    	int i = 0;
    	for (i = 0; i < leftFields; i++) {
    		result.setField(i, left.getField(i));
    	}
    	assert (i - leftFields == 0);
    	for ( ; i < numFields; i++) {
    		result.setField(i, right.getField(i - leftFields));
    	}
    	
    	return result;
    }
}